#!/usr/bin/env node
/**
 * Environment Switching Script
 * Helps switch between different environment configurations
 */

import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = join(__dirname, '..');

// Available environments
const ENVIRONMENTS = ['development', 'staging', 'production'];

// Color codes
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

const colorize = (color, text) => `${colors[color]}${text}${colors.reset}`;
const success = (text) => colorize('green', text);
const error = (text) => colorize('red', text);
const info = (text) => colorize('blue', text);
const highlight = (text) => colorize('cyan', text);

// Get command line arguments
const args = process.argv.slice(2);
const targetEnv = args[0];

// Show usage if no environment specified
if (!targetEnv) {
  console.log(colorize('bold', 'üîÑ Environment Switcher\n'));
  console.log('Usage:');
  console.log(`  ${highlight('node scripts/switch-env.js <environment>')}`);
  console.log(`  ${highlight('pnpm env:switch <environment>')}\n`);
  console.log('Available environments:');
  ENVIRONMENTS.forEach(env => {
    console.log(`  ‚Ä¢ ${highlight(env)}`);
  });
  console.log('\nExample:');
  console.log(`  ${highlight('pnpm env:switch production')}`);
  process.exit(1);
}

// Validate environment
if (!ENVIRONMENTS.includes(targetEnv)) {
  console.log(error(`‚ùå Invalid environment: ${targetEnv}`));
  console.log(`Available environments: ${ENVIRONMENTS.join(', ')}`);
  process.exit(1);
}

// Switch environment
const switchEnvironment = () => {
  const sourceFile = join(projectRoot, `.env.${targetEnv}`);
  const targetFile = join(projectRoot, '.env.local');
  
  // Check if source environment file exists
  if (!existsSync(sourceFile)) {
    console.log(error(`‚ùå Environment file not found: .env.${targetEnv}`));
    process.exit(1);
  }
  
  try {
    // Read source environment
    const envContent = readFileSync(sourceFile, 'utf8');
    
    // Add header comment to identify the active environment
    const header = `# Active Environment: ${targetEnv.toUpperCase()}
# This file was generated by switching to ${targetEnv} environment
# Generated on: ${new Date().toISOString()}
# 
# To switch to a different environment, run:
# pnpm env:switch <environment>

`;
    
    // Write to .env.local (which takes highest precedence in Vite)
    writeFileSync(targetFile, header + envContent);
    
    console.log(success(`‚úÖ Successfully switched to ${highlight(targetEnv)} environment`));
    console.log(`   Configuration loaded from: .env.${targetEnv}`);
    console.log(`   Active configuration saved to: .env.local`);
    
    // Parse and show key configuration
    const env = {};
    envContent.split('\n').forEach(line => {
      line = line.trim();
      if (line && !line.startsWith('#')) {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length) {
          env[key.trim()] = valueParts.join('=').trim();
        }
      }
    });
    
    console.log('\nüìã Active Configuration:');
    console.log(`   API URL: ${highlight(env.VITE_API_BASE_URL || 'Not set')}`);
    console.log(`   Timeout: ${env.VITE_API_TIMEOUT || 'Not set'}ms`);
    console.log(`   Analytics: ${env.VITE_ENABLE_ANALYTICS || 'false'}`);
    console.log(`   Debug Mode: ${env.VITE_ENABLE_DEBUG_MODE || 'false'}`);
    console.log(`   Dev Tools: ${env.VITE_ENABLE_DEV_TOOLS || 'false'}`);
    
    console.log('\nüí° Next steps:');
    console.log(`   ‚Ä¢ Run ${highlight('pnpm dev')} to start development server`);
    console.log(`   ‚Ä¢ Run ${highlight('pnpm build')} to build for deployment`);
    console.log(`   ‚Ä¢ Run ${highlight('pnpm env:check')} to validate configuration`);
    
  } catch (err) {
    console.log(error(`‚ùå Failed to switch environment: ${err.message}`));
    process.exit(1);
  }
};

switchEnvironment();